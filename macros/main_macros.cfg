#####################################################################
#   Macros
#####################################################################

   
######################### PRINT START / END #########################
[gcode_macro Enable_Features]
variable_nozzle_wiper:  False
variable_status_led:    False
gcode:


[gcode_macro Print_Start]
# make sure to call Heatsoak before calling this, if needed
# at the minimum, make sure to pass PA, EXTRUDER, and BED parameters    # should be set!!!
gcode:    
    {% set EXTRUDER = params.EXTRUDER|default(260) %}
    {% set BED = params.BED|default(110) %}
    {% set CHAMBER_TARGET = params.CHAMBER_TARGET|default(40) %}
    {% set BEACON_TARGET = params.BEACON_TARGET|default(65) %}
    {% set OFFSET = params.OFFSET|default(0) %}
    {% set RESET = params.RESET|default('True') %}
    {% set Prime = params.Prime|default('True') %}

    {% if RESET == 'True' %}
        Reset_State
    {% endif %}
    
    {% set nozzle_wiper          = printer["gcode_macro Enable_Features"].nozzle_wiper          %}
    ;SET_PRESSURE_ADVANCE ADVANCE={PA}
    #Do this in your slicer
    
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    G28     ; home axes
    G0 Z2   ; position beacon at 2mm for heat soak

    SET_FAN_SPEED FAN=rebreather SPEED=1 
    
    M140 S{BED}     ; start bed heater
    M109 S150       ; preheat nozzle to probing temp
    M190 S{BED}     ; wait on bed temperature  
 
    RESPOND MSG="Homing"
    STATUS_READY
    Wipe_Nozzle
    G28 Z METHOD=CONTACT CALIBRATE=1    ; calibrate z offset and beacon model
    RESPOND MSG="Sorting the tilt"
    z_tilt_scan
    RESPOND MSG="Creating Mesh"
    BED_MESH_CALIBRATE runs=2
    M107

    RESPOND MSG="Homing Z to nozzle at temp"
    M104 S{EXTRUDER}                    ; set extruder to print temp
    M109 S{EXTRUDER}                    ; wait for extruder temp
    G4 P20000                           ; give the hot block 20s to stabilize
    
    WIPE_NOZZLE
    G28 Z METHOD=CONTACT CALIBRATE=0    ; calibrate z offset only with hot nozzle

    SET_GCODE_OFFSET Z_ADJUST={OFFSET}  ; apply optional material squish via slicer
    SET_GCODE_OFFSET Z=0.02     ; add a little offset for hotend thermal expansion
    
    RESPOND MSG="Getting to print temp"
    # wait for extruder temperature, and either print a prime line or purge
    #{% if PRIME == 'True' or not(nozzle_wiper) %}
        M104 S{EXTRUDER}        ; set extruder temp
    RESPOND MSG="Priming"
        G1 F18000
        G1 X05 Y05              ; move to prime line start point
        M400                    ; wait for moves to finish
        M109 S{EXTRUDER}        ; wait for extruder temp
        #Prime_Line              ; prime line
    #{% else %}
        RESPOND MSG="Purging"
        Go_To_Purge_Location
        M104 S{EXTRUDER}
        G1 Z0.6
        Purge EXACT_TEMP=True TEMPERATURE={EXTRUDER}
    #{% endif %}

    SET_FAN_SPEED FAN=rebreather SPEED=0.5
    M117 Starting Print     
    RESPOND MSG="Starting Print"
    STATUS_PRINTING                                                                                  ; reset Extruder                                           

[gcode_macro Print_End]
gcode:
    STATUS_FINISHED
    G91                         ; relative positioning
    G1 E-6 F4800              ; retract
    G1 Z+1 X-2 Y-2 F6000
    G1 E-2 F500        ; short quick move to disengage from print
    G90                         ; absolute positioning
    
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.z < (max_z - 50) %}
	{% set z_safe = 50.0 %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}

    {% set z_safe =  10 %} #printer.toolhead.position.z +
	
	G0 X{x_safe} Y{y_safe} Z{z_safe} F30000

    M221 S100                   ; reset flow
    M104 S0                     ; turn off hotend
    M140 S0                     ; turn off heatbed
    M107                        ; turn off fan
    SET_FAN_SPEED FAN=rebreather SPEED=0.0 
     RESPOND MSG="Finished"
   ; M84                         ; disable motors
    ;SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=hotend_fan TARGET=45 min_speed=0 max_speed=1

[gcode_macro Reset_State]
gcode:
    CLEAR_PAUSE ; clear pause state in case it was enabled
    M104 S0     ; cancel set temp
    M107        ; turn off part fan
    G21         ; set units to mm
    G90         ; use absolute coordinates
    M83         ; use relative extrusion
    G92 E0.0    ; reset e count
    M220 S100   ; reset speed multiplier
    M221 S100   ; reset flow
    ;SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=hotend_fan TARGET=45 min_speed=0 max_speed=1
  
######################## PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
# for Fluidd and Mainsail compatibility
rename_existing: BASE_CANCEL_PRINT
gcode:
 #   {% set X = params.X|default(05) %}
 #   {% set Y = params.Y|default(05) %}
 #   {% set Z = params.Z|default(10) %}
    #{% set paused = printer.pause_resume.is_paused %}

    M104 S0
    M140 S0
    M141 S0
    M106 S0
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    #BASE_CANCEL_PRINT
    #{% if not paused %}
    #    G91
    #    G1 E-1.7 F2100
    #    G1 Z{Z}
     #   G90
     #   G1 X{X} Y{Y} F6000
     #   G91
    #{#% endif %}
    ;SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=hotend_fan TARGET=45 min_speed=0 max_speed=1
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_heater TARGET=0
    SET_FAN_SPEED FAN=rebreather SPEED=0.0 


[gcode_macro PAUSE]
# for Fluidd and Mainsail compatibility
rename_existing: BASE_PAUSE
gcode:
    #{% set X = params.X|default(05) %}
    #{% set Y = params.Y|default(05) %}
    #{% set Z = params.Z|default(10) %}
    #{% set nozzle_wiper = printer["gcode_macro Enable_Features"].nozzle_wiper %}
    #{% set status_led = printer["gcode_macro Enable_Features"].status_led %}

    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    HOUR_COUNTER_OFF
    {% if status_led %}
        Update_Status_LED
    {% endif %}
    G91
    G1 E-1.7 F2100
    G1 Z{Z}
    G90
    {% if nozzle_wiper %}
        Go_To_Purge_Location
    {% else %}
        G1 X{X} Y{Y} F6000
    {% endif %}
    G91

[gcode_macro RESUME]
# for Fluidd and Mainsail compatibility
rename_existing: BASE_RESUME
gcode:
    {% set nozzle_wiper = printer["gcode_macro Enable_Features"].nozzle_wiper %}
    {% set status_led = printer["gcode_macro Enable_Features"].status_led %}

    {% if status_led %}
        Update_Status_LED
    {% endif %}
    G91
    G1 E1.7 F2100
    G90
    {% if nozzle_wiper %}
        Purge
    {% endif %}
    G91
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    HOUR_COUNTER_ON

[gcode_macro CLEAR_PAUSE]
rename_existing: BASE_CLEAR_PAUSE
gcode:
    {% set status_led = printer["gcode_macro Enable_Features"].status_led %}

    BASE_CLEAR_PAUSE
    {% if status_led %}
        Update_Status_LED
    {% endif %}



######################### MISC #########################

[gcode_macro G32]
gcode:
  BED_MESH_CLEAR
  {% if "z" not in printer.toolhead.homed_axes %} ; G28 Home if needed
    RESPOND MSG="Homing"
    G28
  {% endif %}
  Z_TILT_SCAN
  G28 Z

[gcode_macro z_tilt_scan]
gcode:
    z_tilt_adjust RETRY_TOLERANCE=1
    z_tilt_adjust HORIZONTAL_MOVE_Z=2

[gcode_macro COLD_PULL]
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(235) %}
    {% set PULLTEMP = params.PULLTEMP|default(80) %}
    G90
    M83
    G92 E0
    M109 S{EXTRUDER} 
    M104 S{PULLTEMP}
    M106 S120   #fan on
    G1 E5 F5
    M109 S{PULLTEMP}
    G1 E-15 F45
    G1 E-100 F300
    G92 E0
    M106 S0
    M104 S0
    M84


[gcode_macro _LOW_TEMP_CHECK]
description: Check the nozzle is at temperature and heat it if needed
gcode: 
    {% set T = params.T|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_extruder_temp)|float %}

    {% if printer.extruder.target != 0 %}
        {% if printer.extruder.temperature < printer.extruder.target %}
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %}
        {% if printer.extruder.target < T %}
            M109 S{T}
        {% endif %}
    {% endif %}

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


[gcode_macro _RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro Beacon_Soak]
gcode:
    {% set BEACON_TARGET = params.BEACON_TARGET|default(65) %}
    {% set BEACON_MAXIMUM = params.BEACON_TARGET|int + 7 %}
    {% set EXTRUDER = params.EXTRUDER|default(260)|int - 60 %}
    {% set BED = params.BED|default(110) %}
    M106 S80
    G0 X90 Y90 Z0.5
    M104 S{EXTRUDER}
    RESPOND MSG="Heating Bed"
    M190 S{BED}
    {% if BEACON_TARGET|int > 0 %}
        RESPOND MSG="Cooking Bacon"
        TEMPERATURE_WAIT sensor="temperature_sensor beacon_coil" MINIMUM={BEACON_TARGET} ;MAXIMUM={BEACON_MAXIMUM}
        RESPOND MSG="Bacon is done"
    {% else %}
        RESPOND MSG="Skipping Bacon"
    {% endif %}

[gcode_macro Heat_Soak]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(105) %}
    {% set SOAK_MINS = params.SOAK_MINS|default(30) %}
    {% set CHAMBER_TARGET = params.CHAMBER_TARGET|default(35) %}
    {% set BED = params.BED|default(110) %}
    {% set chamber = printer['temperature_sensor chamber'] %}
    {% if chamber.temperature < CHAMBER_TARGET|int %}
        G28
        ;DETACH_PROBE
        M106 S80
        G0 X90 Y90 Z1
        SET_FAN_SPEED FAN=rebreather SPEED=1 
        STATUS_HEATING
        M104 S160
        M117 Heating Bed
        M190 S{BED_TEMP}
        M117 Starting Soak
        {% for timer in range(SOAK_MINS|int,0,-1) %}
            M117 Soak: {timer}min left
            M105
            G4 P60000
        {% endfor %}
        M107
    {% endif %}


[delayed_gcode Soak_Time]
gcode:
    {% if printer["gcode_macro Heatsoak"].max_time|int == 0 %}
        { action_respond_info("Soak_Time should only be called if Heatsoak is running.") }
    {% elif ((printer["temperature_sensor chamber"].temperature >= printer["gcode_macro Heatsoak"].chamber_target|int) or (printer["gcode_macro Heatsoak"].elapsed_time|int >= printer["gcode_macro Heatsoak"].max_time|int)) %}
        M107    ; turn off fan
        { action_respond_info("Heatsoak complete") }
        RESTORE_GCODE_STATE NAME=Heatsoak_State MOVE=1
        BASE_RESUME
    {% else %}
        M140 S{printer["gcode_macro Heatsoak"].bed_hold|int}    ; set bed temp to avoid idle timeout

        {% set elapsed = printer["gcode_macro Heatsoak"].elapsed_time|int %}
        {% set max = printer["gcode_macro Heatsoak"].max_time|int %}
        { action_respond_info("Waiting for chamber temp. Seconds elapsed: %d/%d" % (elapsed, max)) }
        
        SET_GCODE_VARIABLE MACRO=Heatsoak VARIABLE=elapsed_time VALUE={printer["gcode_macro Heatsoak"].elapsed_time|int + printer["gcode_macro Heatsoak"].delay|int}
        UPDATE_DELAYED_GCODE ID=Soak_Time DURATION={printer["gcode_macro Heatsoak"].delay|int}  ; wait
    {% endif %}

[gcode_macro Skip]
gcode:
    SET_GCODE_VARIABLE MACRO=Heatsoak VARIABLE=chamber_target VALUE=0
    UPDATE_DELAYED_GCODE ID=Soak_Time DURATION=0
    UPDATE_DELAYED_GCODE ID=Soak_Time DURATION=1

######################### FILAMENT #########################

[gcode_macro CHANGE_FILAMENT]
description: Do a PAUSE, park the toolhead over the purge bucket and unload the filament
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_extruder_temp)|float %}

 	SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_state
    PAUSE
    PARK
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_state


[gcode_macro UNLOAD_FILAMENT]
description: Basic unload of the filament (used with M600/CHANGE_FILAMENT)
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_extruder_temp)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}

	SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state
	_LOW_TEMP_CHECK T={TEMP}

    _TIP_SHAPING
    M83
    G1 E-20 F3600
    G4 P3000
    G1 E{DISTANCE|float * -1} F3000

	RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state


[gcode_macro LOAD_FILAMENT]
description: Basic load of the filament (used with M600/CHANGE_FILAMENT)
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_extruder_temp)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}

	SAVE_GCODE_STATE NAME=LOAD_FILAMENT_state
	_LOW_TEMP_CHECK T={TEMP}
    M83
	G92 E0
    G1 E{DISTANCE|float} F200
    G1 E50 F150
    
	G92 E0
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state

[gcode_macro _TIP_SHAPING]
description: Filament tip shaping sequence
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES_OTHER"].print_default_extruder_temp)|float %}

	SAVE_GCODE_STATE NAME=TIP_SHAPING_state
	_LOW_TEMP_CHECK T={TEMP}
    
    {% set old_pressure_advance = printer.extruder.pressure_advance|default(0) %} # old pressure advance
    # we suppress pressure advance
    SET_PRESSURE_ADVANCE ADVANCE=0

    M82
    G92 E0
    G1 E2 F3600
    G1 E0 F3600
    G1 E3 F3600
    G1 E0 F3600
    G1 E4 F3600
    G1 E0 F3600

    # set last pressure advance
    SET_PRESSURE_ADVANCE ADVANCE={old_pressure_advance}
	RESTORE_GCODE_STATE NAME=TIP_SHAPING_state


[gcode_macro Nozzle_Wiper_Variables]
variable_purge_x:       -6.75  # x purge location
variable_purge_y:       111 # y purge location
variable_purge_x_entry: 0   # x entry location before going to the purge location
variable_purge_y_entry: 111 # y entry location before going to the purge location
variable_wipe_dx:       0   # distance to move in x from the purge position in order to wipe
variable_wipe_dy:       17  # distance to move in y from the purge position in order to wipe
variable_wipe_count:    2   # number of wipe cycles
variable_travel_speed:  300 # how fast travel speeds will be performed
variable_entry_speed:   100 # how fast to move from the entry location to the purge location
variable_wipe_speed:    50  # how fast to move when wiping
variable_purge_speed:   7   # how fast to extrude in mm/s when purging
variable_purge_fan:     32  # default fan speed out of 255 when purging
variable_wipe_fan:      64 # default fan speed out of 255 when wiping
gcode:

#   Move above the purge bucket
[gcode_macro Go_To_Purge_Location]
gcode:
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set St = printer["gcode_macro Nozzle_Wiper_Variables"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}

    SAVE_GCODE_STATE NAME=Go_To_Purge_Location_state
    G90

    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
        G1 X{Pxe} Y{Pye} F{St}
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

    RESTORE_GCODE_STATE NAME=Go_To_Purge_Location_state

#   Wipe the nozzle on the brass brush or silicone wiper
[gcode_macro Wipe_Nozzle]
# params:
#   OLD_FAN_SPEED
gcode:
    {% set OLD_FAN_SPEED = params.OLD_FAN_SPEED|default(-1)|int %}
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set Wdx = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dx|float %}
    {% set Wdy = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dy|float %}
    {% set Wc = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_count|int %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}
    {% set Sw = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_fan %}
    
    {% if OLD_FAN_SPEED == -1 %}
        {% set old_Sf = printer.fan.speed %}
    {% else %}
        {% set old_Sf = OLD_FAN_SPEED %}
    {% endif %}
    
    {% if printer.fan.speed < Sf %}
        {% set wait_for_fan = True %}
    {% else %}
        {% set wait_for_fan = False %}
    {% endif %}

    SAVE_GCODE_STATE NAME=Wipe_Nozzle_state
    G90

    # go to purge location
    Go_To_Purge_Location

    # set fan speed for wiping
    M106 S{Sf}
    
    # wait for fan to cool filament if needed
    {% if wait_for_fan %}
        G4 P800
    {% endif %}

    # wipe nozzle
    G1 X{Px + Wdx} Y{Py + Wdy} F12000
    {% for i in range(Wc) %}
        G1 X{Px} Y{Py} F{Sw}
        G1 X{Px + Wdx} Y{Py + Wdy} F{Sw}
    {% endfor %}

    # move away from wiper
    G1 X{Pxe + Wdx} Y{Pye + Wdy} F{Se}

    # restore fan speed
    M106 S{(old_Sf * 255)|int}

    RESTORE_GCODE_STATE NAME=Wipe_Nozzle_state

#   Purge material into the bucket
[gcode_macro Purge]
description: Extrude into the purge bucket and wipe the nozzle
# params:
#   EXACT_TEMP:     whether to cool to specified temperature if already above it
#   TEMPERATURE:    minimum extruder temperature before purging
#   FEED_AMOUNT:    length of material in mm to purge
#   MAX_FEED:       max extrude length for a single purge strip. Set to -1 to disable length limit.
gcode:
    {% set EXACT_TEMP = params.EXACT_TEMP|default(False) %}
    {% set TEMPERATURE = params.TEMPERATURE|default(230.0)|float %}
    {% set FEED_AMOUNT = params.FEED_AMOUNT|default(15.0)|float %}
    {% set MAX_FEED = params.MAX_FEED|default(8.0)|float %}

    {% set Sp = printer["gcode_macro Nozzle_Wiper_Variables"].purge_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].purge_fan %}
    {% set old_Sf = printer.fan.speed %}

    SAVE_GCODE_STATE NAME=Purge_state

    # make sure FEED_AMOUNT is at least 3 to avoid negative E movements
    {% if FEED_AMOUNT < 3 %}
        {% set FEED_AMOUNT = 3 %}
    {% endif %}
    
    # go to purge location
    Go_To_Purge_Location

    # wait for hotend
    {% if EXACT_TEMP|lower == 'true' or printer.extruder.temperature < TEMPERATURE %}
        M109 S{TEMPERATURE}
    {% endif %}

    # set fan speed for purging
    M106 S{Sf}

    # relative extrusion
    M83

    # if extrude length is unlimited, purge a single strip
    {% if MAX_FEED == -1 %}
        # extrude
        G1 E{FEED_AMOUNT - 3} F{Sp}
        G1 E3 F100

    # else purge multiple smaller strips
    {% else %}
        {% for i in range(((FEED_AMOUNT - 3) / MAX_FEED)|int) %}
            # go to purge location
            Go_To_Purge_Location
            
            # extrude
            G1 E{MAX_FEED - 3} F{Sp}
            G1 E3 F100

            # wait
            G4 P800

            # wipe the nozzle
            Wipe_Nozzle OLD_FAN_SPEED={Sf}
        {% endfor %}

        # purge remainder
        {% set remainder = (FEED_AMOUNT - 3)|int % MAX_FEED|int %}
        Go_To_Purge_Location
        G1 E{remainder} F{Sp}
        G1 E3 F100
    {% endif %}

    # reset E position
    G92 E0.0

    # wait
    G4 P800

    # wipe the nozzle
    Wipe_Nozzle OLD_FAN_SPEED={old_Sf}

    RESTORE_GCODE_STATE NAME=Purge_state

[gcode_macro Base_Load_Filament]
gcode:
    M117 Loading Filament...
    G92 E0.0
    G91
    
    {% if printer["gcode_macro Filament_Loading_Variables"].filament_loaded %}
        G1 E15 F500
    {% else %}
        G1 E40 F960
        G1 E50 F500 # used to be E55
        SET_GCODE_VARIABLE MACRO=Filament_Loading_Variables VARIABLE=filament_loaded VALUE=True
    {% endif %}

    G90
    G92 E0.0
    M400
    M117 Load Complete
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=5

[gcode_macro Base_Unload_Filament]
gcode:
    M117 Unloading Filament...
    G92 E0.0
    G91
    G1 E10 F400     ; extrude filament to get better blob on end
    G1 E-35 F1000   ; retract
    G1 E-45 F5200
    G90
    G92 E0.0
    M400
    SET_GCODE_VARIABLE MACRO=Filament_Loading_Variables VARIABLE=filament_loaded VALUE=False
    M117 Remove Filament Now!
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=5


######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
    
######################### ALIASES/SHORTCUTS #########################

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                             ; turn steppers off
    TURN_OFF_HEATERS                                ; turn bed / hotend off
    M107                                            ; turn print cooling fan off


[gcode_macro resonance_calc]
gcode:
    AXES_SHAPER_CALIBRATION FREQ_END=110 HZ_PER_SEC=0.5    ;measure IS with max freq 110 and slow it down to 0.5hz per sec